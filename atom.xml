<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>电光石火的博客</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2018-06-02T10:46:12.744Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>电光石火</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>常用正则</title>
    <link href="http://yoursite.com/2018/06/02/%E5%B8%B8%E7%94%A8%E6%AD%A3%E5%88%99/"/>
    <id>http://yoursite.com/2018/06/02/常用正则/</id>
    <published>2018-06-02T10:45:06.000Z</published>
    <updated>2018-06-02T10:46:12.744Z</updated>
    
    <content type="html"><![CDATA[<p>邮箱：/^(\w)+(.\w+)*@(\w)+((.\w+)+)$/<br>身份证号：/(^[1-9]\d{5}[1-9]\d{3}((0\d)|(1[0-2]))(([0|1|2]\d)|3[0-1])\d{3}([0-9]|X|x)$)|(^[1-9]\d{7}((0\d)|(1[0-2]))(([0|1|2]\d)|3[0-1])\d{3}$)/<br>手机号：/^1[0-9][0-9]\d{4,8}$/<br>版本号：/^\d{1,2}(.\d{1,2}){1,2}$/</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;邮箱：/^(\w)+(.\w+)*@(\w)+((.\w+)+)$/&lt;br&gt;身份证号：/(^[1-9]\d{5}[1-9]\d{3}((0\d)|(1[0-2]))(([0|1|2]\d)|3[0-1])\d{3}([0-9]|X|x)$)|(^[1-9]\d{7}((0\
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>事件冒泡与事件捕获</title>
    <link href="http://yoursite.com/2018/06/02/%E4%BA%8B%E4%BB%B6%E5%86%92%E6%B3%A1&amp;%E4%BA%8B%E4%BB%B6%E6%8D%95%E8%8E%B7/"/>
    <id>http://yoursite.com/2018/06/02/事件冒泡&amp;事件捕获/</id>
    <published>2018-06-02T06:53:06.000Z</published>
    <updated>2018-06-02T07:09:02.967Z</updated>
    
    <content type="html"><![CDATA[<h3 id="冒泡"><a href="#冒泡" class="headerlink" title="冒泡"></a>冒泡</h3><p>  html:<br>  <code>&lt;div id=&quot;parent&quot;&gt;　　    &lt;div id=&quot;child&quot; class=&quot;child&quot;&gt;&lt;/div&gt;  &lt;/div&gt;</code><br> js:<br><code>document.getElementById(&quot;parent&quot;).addEventListener(&quot;click&quot;,function(e){alert(&quot;parent事件被触发，&quot;+this.id);})document.getElementById(&quot;child&quot;).addEventListener(&quot;click&quot;,function(e){alert(&quot;child事件被触发，&quot;+this.id)})</code><br><a id="more"></a><br>// 结果：<br>child事件被触发，child<br>parent事件被触发，parent</p><h3 id="捕获"><a href="#捕获" class="headerlink" title="捕获"></a>捕获</h3><p>  html:<br>  <div id="parent"><br>　　    <div id="child" class="child"></div><br>  </div><br> js:<br>document.getElementById(“parent”).addEventListener(“click”,function(e){<br>alert(“parent事件被触发，”+this.id);<br>}，true)<br>document.getElementById(“child”).addEventListener(“click”,function(e){<br>alert(“child事件被触发，”+this.id)<br>}，true)</p><p>// 结果：<br>parent事件被触发，parent</p><p>child事件被触发，child</p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;冒泡&quot;&gt;&lt;a href=&quot;#冒泡&quot; class=&quot;headerlink&quot; title=&quot;冒泡&quot;&gt;&lt;/a&gt;冒泡&lt;/h3&gt;&lt;p&gt;  html:&lt;br&gt;  &lt;code&gt;&amp;lt;div id=&amp;quot;parent&amp;quot;&amp;gt;
　　    &amp;lt;div id=&amp;quot;child&amp;quot; class=&amp;quot;child&amp;quot;&amp;gt;&amp;lt;/div&amp;gt;
  &amp;lt;/div&amp;gt;&lt;/code&gt;&lt;br&gt; js:&lt;br&gt;&lt;code&gt;document.getElementById(&amp;quot;parent&amp;quot;).addEventListener(&amp;quot;click&amp;quot;,function(e){
alert(&amp;quot;parent事件被触发，&amp;quot;+this.id);
})
document.getElementById(&amp;quot;child&amp;quot;).addEventListener(&amp;quot;click&amp;quot;,function(e){
alert(&amp;quot;child事件被触发，&amp;quot;+this.id)
})&lt;/code&gt;&lt;br&gt;
    
    </summary>
    
    
      <category term="js" scheme="http://yoursite.com/tags/js/"/>
    
  </entry>
  
  <entry>
    <title>判断变量是数组还是对象</title>
    <link href="http://yoursite.com/2018/06/01/%E5%88%A4%E6%96%AD%E5%8F%98%E9%87%8F%E6%98%AF%E6%95%B0%E7%BB%84%E8%BF%98%E6%98%AF%E5%AF%B9%E8%B1%A1/"/>
    <id>http://yoursite.com/2018/06/01/判断变量是数组还是对象/</id>
    <published>2018-06-01T06:22:35.000Z</published>
    <updated>2018-06-02T07:05:10.999Z</updated>
    
    <content type="html"><![CDATA[<p>value是数组：<code>Object.prototype.toString.call(value)===&quot;[object Array]&quot;</code><br>value是对象：<code>Object.prototype.toString.call(value)===&quot;[object Object]&quot;</code></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;value是数组：&lt;code&gt;Object.prototype.toString.call(value)===&amp;quot;[object Array]&amp;quot;&lt;/code&gt;&lt;br&gt;value是对象：&lt;code&gt;Object.prototype.toString.call
      
    
    </summary>
    
    
      <category term="js" scheme="http://yoursite.com/tags/js/"/>
    
  </entry>
  
  <entry>
    <title>JS预解析</title>
    <link href="http://yoursite.com/2018/05/29/JS%E9%A2%84%E8%A7%A3%E6%9E%90/"/>
    <id>http://yoursite.com/2018/05/29/JS预解析/</id>
    <published>2018-05-29T01:23:03.000Z</published>
    <updated>2018-06-02T06:55:49.983Z</updated>
    
    <content type="html"><![CDATA[<h3 id="一、原理"><a href="#一、原理" class="headerlink" title="一、原理"></a>一、原理</h3><ol><li>定义：JavaScript”预解析”，可以理解为把变量或函数预先解析到它们被使用的环境中。</li><li>通俗点讲，即认为浏览器在正式运行JavaScript代码前，<br>第一步，会预先根据关键字var、function等，来查找一些需要被解析的东西，<br>例如：var a = 1; function test(){ alert(2); };<br>第二步，给这些需要被解析的东西提前赋值，其中包括：<br>⑴ 所有的变量，提前赋值：undefined；<br>⑵ 所有的函数，在正式运行代码前，都赋值为整个函数块。<br>第三部，“预解析”结束后，浏览器再逐行解读代码，并通过表达式：= + - * – ++ !等来修改这些“预解析”的值。<a id="more"></a><h3 id="二、解析原则"><a href="#二、解析原则" class="headerlink" title="二、解析原则"></a>二、解析原则</h3></li><li>JavaScript “预解析”过程中，遇到重名的内容，只保留一个：<br>⑴ 重名变量或重名函数，保留最后的一个；<br>⑵ 变量和函数重名，只保留函数；<br>2.根据作用域链，来查找上文第一步中提到的需要被解析的东西<br>查找原则：从上到下，从里到外<br>即先找局部作用域里找，然后子对象会一级一级向上寻找所有父对象的变量。<h3 id="三、案例分析"><a href="#三、案例分析" class="headerlink" title="三、案例分析"></a>三、案例分析</h3>案例一：</li></ol><p>alert(a); // function a(){alert(4);}<br>var a=1;<br>alert(a); // 1<br>function a(){alert(2);}<br>alert(a); // 1<br>var a=3;<br>alert(a); // 3<br>function a(){alert(4);}<br>alert(a); // 3<br>a(); //报错<br>分析：</p><ol><li>找出需要被解析的东西：a</li><li>预解析赋值：undefined，function a( alert(2); )，undefined，function a( alert(4); )<br>根据解析原则2，变量与函数重名保留函数，则第一个alert预解析为：function a( alert(4);</li><li>预解析结束，代码开始执行，第一个alert通过表达式赋值，则输出预解析的值，其余均有表达式操作，依次改变为：1，3</li><li>最后的a为一个变量，不能以函数的方式执行<br>案例二：</li></ol><p>var a = 1;<br>function test(){<br>   alert(a); //undefined<br>   var a = 2;<br>}<br>test();<br>alert(a); //1<br>分析：<br>通过var关键字在局部作用域里，查找到需要被解析的变量a，赋值undefined。<br>这里注意函数的执行顺序，test函数执行时，alert(a)并未有表达式操作，故为undefined。</p><p><a href="https://blog.csdn.net/darinzanya/article/details/53067743" target="_blank" rel="noopener">https://blog.csdn.net/darinzanya/article/details/53067743</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;一、原理&quot;&gt;&lt;a href=&quot;#一、原理&quot; class=&quot;headerlink&quot; title=&quot;一、原理&quot;&gt;&lt;/a&gt;一、原理&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;定义：JavaScript”预解析”，可以理解为把变量或函数预先解析到它们被使用的环境中。&lt;/li&gt;
&lt;li&gt;通俗点讲，即认为浏览器在正式运行JavaScript代码前，&lt;br&gt;第一步，会预先根据关键字var、function等，来查找一些需要被解析的东西，&lt;br&gt;例如：var a = 1; function test(){ alert(2); };&lt;br&gt;第二步，给这些需要被解析的东西提前赋值，其中包括：&lt;br&gt;⑴ 所有的变量，提前赋值：undefined；&lt;br&gt;⑵ 所有的函数，在正式运行代码前，都赋值为整个函数块。&lt;br&gt;第三部，“预解析”结束后，浏览器再逐行解读代码，并通过表达式：= + - * – ++ !等来修改这些“预解析”的值。
    
    </summary>
    
    
      <category term="js" scheme="http://yoursite.com/tags/js/"/>
    
  </entry>
  
</feed>
